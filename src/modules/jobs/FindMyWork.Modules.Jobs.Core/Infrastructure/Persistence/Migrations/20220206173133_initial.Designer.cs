// <auto-generated />
using System;
using FindMyWork.Modules.Jobs.Core.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FindMyWork.Modules.Jobs.Core.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(JobsDbContext))]
    [Migration("20220206173133_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.JobInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactPersonId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndsOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberEmployeesToHire")
                        .HasColumnType("integer");

                    b.Property<decimal>("SalaryPerEmployee")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("StartsOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalHoursToWork")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("JobInformations");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.JobStatusInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("CurrentStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("OldStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobStatusInfos");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.JobInformation", b =>
                {
                    b.HasOne("FindMyWork.Modules.Jobs.Core.Domain.Entities.Category", "Category")
                        .WithMany("JobInformations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyWork.Modules.Jobs.Core.Domain.Entities.Job", "Job")
                        .WithOne("JobInformation")
                        .HasForeignKey("FindMyWork.Modules.Jobs.Core.Domain.Entities.JobInformation", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyWork.Modules.Jobs.Core.Domain.Entities.Address", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.JobStatusInfo", b =>
                {
                    b.HasOne("FindMyWork.Modules.Jobs.Core.Domain.Entities.Job", "Job")
                        .WithMany("JobStatusInfos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("JobInformations");
                });

            modelBuilder.Entity("FindMyWork.Modules.Jobs.Core.Domain.Entities.Job", b =>
                {
                    b.Navigation("JobInformation")
                        .IsRequired();

                    b.Navigation("JobStatusInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
